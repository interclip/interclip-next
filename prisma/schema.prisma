// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "referentialIntegrity"]
}

model Clip {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  url        String    @db.Text
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  hashLength Int       @default(5)
  ipfsHash   String?
  signature  String?

  ownerID String?
  owner   User?   @relation(fields: [ownerID], references: [id])

  @@map("clips")
}

model User {
  id         String @id @default(uuid())
  username   String @unique @default(uuid())
  email      String @unique
  ownedClips Clip[]

  isStaff Boolean @default(false)

  name                     String?
  emailVerified            DateTime?
  image                    String?
  storageProvider          String    @default("S3")
  clipExpirationPreference Int       @default(90) @db.Int
  clipSign                 Boolean   @default(false)

  accounts Account[]
  sessions Session[]

  // Timestamps
  createdAt DateTime @default(now())

  // Attributes
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
